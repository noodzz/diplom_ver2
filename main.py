import logging
import asyncio
import json
import os
import tempfile
import datetime

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    KeyboardButton, Message, ReplyKeyboardMarkup, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
)
from dotenv import load_dotenv
from data.config import Config
from database.db_manager import DatabaseManager
from services.project_manager import ProjectManager
from services.task_manager import TaskManager
from services.employee_manager import EmployeeManager
from services.jira_exporter import JiraExporter
from services.network_model import NetworkModel
from services.gantt_chart import GanttChart
from services.workload_chart import WorkloadChart
from utils.helpers import parse_csv, format_date, is_authorized, is_admin
from utils.scheduler import schedule_project, update_database_assignments, balance_employee_workload

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

test_mode_active = False
original_employees_data = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
db_manager = DatabaseManager()
project_manager = ProjectManager(db_manager)
task_manager = TaskManager(db_manager)
employee_manager = EmployeeManager(db_manager)
jira_exporter = JiraExporter()
network_model = NetworkModel()
gantt_chart = GanttChart()
workload_chart = WorkloadChart()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()
dp.include_router(router)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞
class ProjectState(StatesGroup):
    waiting_for_name = State()
    waiting_for_start_date = State()
    waiting_for_choice = State()
    waiting_for_csv = State()
    waiting_for_template = State()


class TaskState(StatesGroup):
    waiting_for_name = State()
    waiting_for_duration = State()
    waiting_for_predecessors = State()
    waiting_for_employee_type = State()
    waiting_for_employee = State()

class AdminState(StatesGroup):
    waiting_for_user_id = State()

# -----------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
# -----------------------------------------------------------------------------

@router.message(CommandStart())
async def cmd_start(message: Message):
    if not is_authorized(message.from_user.id, db_manager):
        user_id = message.from_user.id
        await message.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏!\n\n"
        "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã\n"
        "‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω\n"
        "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –≤ Jira\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_project, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "–ò–ª–∏ /list_projects, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å: /help"
    )
    await message.answer(welcome_text)


@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ CSV\n"
        "/list_projects - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "–†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å:\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ CSV-—Ñ–∞–π–ª–∞\n"
        "2. –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω\n"
        "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º\n" 
        "4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ Jira"
    )
    await message.answer(help_text)


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    if current_state is None:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await state.clear()

    # –í—ã–≤–æ–¥–∏–º —Ä–∞–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
    if current_state.startswith('ProjectState:'):
        await message.answer("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
    elif current_state.startswith('TaskState:'):
        await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    elif current_state.startswith('AdminState:'):
        await message.answer("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/create_project - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç\n"
        "/list_projects - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )
    await message.answer(help_text)

# -----------------------------------------------------------------------------
# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -----------------------------------------------------------------------------

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not is_admin(message.from_user.id, db_manager):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")]
    ])

    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id, db_manager):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    users = db_manager.get_all_users()

    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    buttons = []
    for user in users:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if user['is_active'] else "‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        role = "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user['is_admin'] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        text += f"ID: {user['id']} - {status}, {role}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞)
        if user['id'] != callback.from_user.id:
            action = "block" if user['is_active'] else "unblock"
            label = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user['is_active'] else "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            buttons.append([InlineKeyboardButton(
                text=f"{label} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['id']}",
                callback_data=f"user_{action}_{user['id']}"
            )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith("user_block_") or c.data.startswith("user_unblock_"))
async def toggle_user_status(callback: CallbackQuery):
    if not is_admin(callback.from_user.id, db_manager):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    parts = callback.data.split("_")
    action = parts[1]  # "block" –∏–ª–∏ "unblock"
    user_id = int(parts[2])

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_active = action == "unblock"  # True –µ—Å–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, False –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    db_manager.update_user(user_id, is_active=is_active)

    action_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_active else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {action_text}!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await admin_users(callback)


@router.callback_query(F.data == "add_user")
async def add_user_start(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id, db_manager):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:"
    )
    await state.set_state(AdminState.waiting_for_user_id)


@router.message(AdminState.waiting_for_user_id)
async def process_new_user_id(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id, db_manager):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return

    try:
        user_id = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db_manager.get_user(user_id)

        if existing_user:
            await message.answer(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if existing_user['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}\n"
                f"–†–æ–ª—å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user['is_admin'] else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_manager.add_user(user_id, name=f"User_{user_id}", is_admin=0)
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")]
        ])
        await message.answer("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

    await state.clear()


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id, db_manager):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        total_projects = db_manager.execute("SELECT COUNT(*) FROM projects")[0][0]
        active_projects = db_manager.execute("SELECT COUNT(*) FROM projects WHERE status = 'active'")[0][0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
        total_tasks = db_manager.execute("SELECT COUNT(*) FROM tasks")[0][0]
        group_tasks = db_manager.execute("SELECT COUNT(*) FROM tasks WHERE is_group = 1")[0][0]
        subtasks = db_manager.execute("SELECT COUNT(*) FROM tasks WHERE parent_id IS NOT NULL")[0][0]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        total_users = db_manager.execute("SELECT COUNT(*) FROM users")[0][0]
        active_users = db_manager.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")[0][0]
        admin_users = db_manager.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")[0][0]

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        projects_by_user = db_manager.execute("""
            SELECT u.id, u.name, COUNT(p.id) as project_count 
            FROM users u 
            LEFT JOIN projects p ON u.id = p.user_id 
            GROUP BY u.id 
            ORDER BY project_count DESC
        """)

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_project = db_manager.execute(
            "SELECT name, created_at FROM projects ORDER BY created_at DESC LIMIT 1"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        stats_text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê**\n\n"

        stats_text += "**–ü—Ä–æ–µ–∫—Ç—ã:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {total_projects}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {active_projects}\n"

        stats_text += "\n**–ó–∞–¥–∞—á–∏:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
        stats_text += f"‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–¥–∞—á: {group_tasks}\n"
        stats_text += f"‚Ä¢ –ü–æ–¥–∑–∞–¥–∞—á: {subtasks}\n"

        stats_text += "\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
        stats_text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_users}\n"

        stats_text += "\n**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:**\n"
        for user_data in projects_by_user:
            user_id, user_name, count = user_data
            stats_text += f"‚Ä¢ {user_name or f'User_{user_id}'}: {count} –ø—Ä–æ–µ–∫—Ç(–æ–≤)\n"

        if last_project:
            project_name, created_at = last_project[0]
            stats_text += f"\n**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç:**\n‚Ä¢ {project_name} ({created_at})\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        import platform
        import psutil

        stats_text += "\n**–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        stats_text += f"‚Ä¢ –û–°: {platform.system()} {platform.release()}\n"
        stats_text += f"‚Ä¢ Python: {platform.python_version()}\n"

        try:
            process = psutil.Process(os.getpid())
            memory_usage = process.memory_info().rss / 1024 / 1024  # –≤ –ú–ë
            stats_text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} –ú–ë\n"
            stats_text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {(datetime.datetime.now() - datetime.datetime.fromtimestamp(process.create_time())).total_seconds() / 3600:.2f} —á\n"
        except:
            stats_text += "‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
        ])

        await callback.message.edit_text(stats_text, reply_markup=markup)

    except Exception as e:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")]
        ])
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=markup
        )


@router.callback_query(F.data == "admin")
async def back_to_admin(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id, db_manager):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="admin_stats")]
    ])

    await callback.message.edit_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


# -----------------------------------------------------------------------------
# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
# -----------------------------------------------------------------------------

@router.message(Command("create_project"))
async def cmd_create_project(message: Message, state: FSMContext):
    if not is_authorized(message.from_user.id):
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(ProjectState.waiting_for_name)


@router.message(ProjectState.waiting_for_name)
async def process_project_name(message: Message, state: FSMContext):
    await state.update_data(project_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD):")
    await state.set_state(ProjectState.waiting_for_start_date)


@router.message(ProjectState.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    start_date = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É
        datetime.datetime.strptime(start_date, '%Y-%m-%d')

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        await state.update_data(start_date=start_date)

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="use_template")],
            [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CSV", callback_data="upload_csv")],
        ])

        await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?", reply_markup=markup)
        await state.set_state(ProjectState.waiting_for_choice)
    except ValueError:
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Å–Ω–æ–≤–∞
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-14)."
        )
        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞


@router.callback_query(F.data == "use_template", ProjectState.waiting_for_choice)
async def process_template_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:")

    templates = project_manager.get_templates()
    buttons = []
    for template in templates:
        buttons.append([InlineKeyboardButton(text=template['name'], callback_data=f"template_{template['id']}")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:", reply_markup=markup)
    await state.set_state(ProjectState.waiting_for_template)


@router.callback_query(ProjectState.waiting_for_template)
async def process_template_selection(callback: CallbackQuery, state: FSMContext):
    template_id = int(callback.data.split('_')[1])
    user_data = await state.get_data()

    try:
        user_id = callback.from_user.id
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
        project_id = project_manager.create_from_template(
            user_data['project_name'],
            user_data['start_date'],
            template_id,
            user_id=user_id
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
        buttons = [
            [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"view_project_{project_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{user_data['project_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞!\n\n"
            f"ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}\n\n"
            f"–í—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏, "
            f"–∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω.",
            reply_markup=markup
        )
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

    await state.clear()


@router.callback_query(F.data == "upload_csv", ProjectState.waiting_for_choice)
async def process_csv_choice(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞.\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
        "- –ó–∞–¥–∞—á–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –¥–Ω—è—Ö\n"
        "- –¢–∏–ø - –¢–∏–ø –∑–∞–¥–∞—á–∏ (–æ–±—ã—á–Ω–∞—è –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤–∞—è)\n"
        "- –î–æ–ª–∂–Ω–æ—Å—Ç—å - –¢—Ä–µ–±—É–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
        "- –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ - –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "- –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∑–∞–¥–∞—á–∞ - –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏\n"
        "- –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è - –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –º–æ–≥—É—Ç –ª–∏ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–¥–∞/–Ω–µ—Ç)\n"
        "\n"
        "–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://docs.google.com/spreadsheets/d/1n-He466tyHoeZVLSUfI8A4YuXfCdf9W7yLyrT8v2ZI8/edit?gid=0#gid=0"
    )
    await state.set_state(ProjectState.waiting_for_csv)


@router.message(ProjectState.waiting_for_csv)
async def process_csv_file(message: Message, state: FSMContext):
    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV-—Ñ–∞–π–ª.")
        return

    try:
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        downloaded_file = await bot.download_file(file_path)

        user_data = await state.get_data()
        csv_content = downloaded_file.read().decode('utf-8')
        project_data = parse_csv(csv_content)

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É: –∏—Å–ø–æ–ª—å–∑—É–µ–º message –≤–º–µ—Å—Ç–æ callback
        user_id = message.from_user.id
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ CSV. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")

        project_id = project_manager.create_from_csv(
            user_data['project_name'],
            user_data['start_date'],
            project_data,
            user_id=user_id
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
        buttons = [
            [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data=f"view_project_{project_id}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(
            f"‚úÖ –ü—Ä–æ–µ–∫—Ç '{user_data['project_name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏–∑ CSV!\n\n"
            f"ID –ø—Ä–æ–µ–∫—Ç–∞: {project_id}\n\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(project_data)} –∑–∞–¥–∞—á. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω.",
            reply_markup=markup
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV: {str(e)}")

    await state.clear()

@router.message(Command("list_projects"))
async def cmd_list_projects(message: Message):
    if not is_authorized(message.from_user.id):
        return

    projects = project_manager.get_all_projects(user_id=message.from_user.id)

    if not projects:
        await message.answer("–ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_project")
        return

    buttons = []
    for project in projects:
        buttons.append([InlineKeyboardButton(
            text=f"{project['name']} (–Ω–∞—á–∞–ª–æ: {format_date(project['start_date'])})",
            callback_data=f"view_project_{project['id']}"
        )])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)


@router.callback_query(lambda c: c.data.startswith("view_project_"))
async def view_project_callback(callback: CallbackQuery):
    project_id = int(callback.data.split("_")[2])

    try:
        project_info = project_manager.get_project_details(project_id)
        tasks = task_manager.get_tasks_by_project(project_id)

        text = f"–ü—Ä–æ–µ–∫—Ç: {project_info['name']}\n"
        text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_date(project_info['start_date'])}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {project_info['status']}\n\n"

        if tasks:
            text += "–ó–∞–¥–∞—á–∏:\n"
            for task in tasks:
                text += f"‚Ä¢ {task['name']} "
                text += f"({task['duration']} –¥–Ω.) "

                if task['is_group']:
                    text += "[–ì—Ä—É–ø–ø–æ–≤–∞—è –∑–∞–¥–∞—á–∞]\n"
                    subtasks = task_manager.get_subtasks(task['id'])
                    for subtask in subtasks:
                        employee = None
                        if subtask.get('employee_id'):
                            try:
                                employee = employee_manager.get_employee(subtask['employee_id'])
                            except ValueError:
                                pass

                        employee_name = f"{employee['name']} ({employee['position']})" if employee else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                        text += f"  ‚Ü≥ {subtask['name']} - {employee_name}\n"
                else:
                    employee = None
                    if task.get('employee_id'):
                        try:
                            employee = employee_manager.get_employee(task['employee_id'])
                        except ValueError:
                            pass

                    text += f"- {employee['name']} ({employee['position']})" if employee else "- –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
        else:
            text += "–ó–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        if len(text) > 3500:  # –õ–∏–º–∏—Ç Telegram —Å –∑–∞–ø–∞—Å–æ–º
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = tempfile.mkdtemp()
            safe_project_name = "".join(
                c if c.isalnum() or c in [' ', '.', '_', '-'] else '_' for c in project_info['name'])
            file_path = os.path.join(temp_dir, f"{safe_project_name}_details.txt")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await callback.message.edit_text(
                f"–ü—Ä–æ–µ–∫—Ç: {project_info['name']}\n"
                f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_date(project_info['start_date'])}\n"
                f"–°—Ç–∞—Ç—É—Å: {project_info['status']}\n\n"
                f"–ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –∑–∞–¥–∞—á, –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ:"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file = FSInputFile(file_path)
            await bot.send_document(
                callback.from_user.id,
                file,
                caption=f"–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{project_info['name']}'"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                [InlineKeyboardButton(text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"calculate_{project_id}")],
                [InlineKeyboardButton(text="üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data=f"workload_{project_id}")],
                [InlineKeyboardButton(text="üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Jira", callback_data=f"export_jira_{project_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
            ]

            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            buttons = [
                [InlineKeyboardButton(text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω", callback_data=f"calculate_{project_id}")],
                [InlineKeyboardButton(text="üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", callback_data=f"workload_{project_id}")],
                [InlineKeyboardButton(text="üîÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Jira", callback_data=f"export_jira_{project_id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
            ]

            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.edit_text(text, reply_markup=markup)

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞: {str(e)}")

@router.callback_query(F.data == "back_to_projects")
async def back_to_projects(callback: CallbackQuery):
    projects = project_manager.get_all_projects()

    buttons = []
    for project in projects:
        buttons.append([InlineKeyboardButton(
            text=f"{project['name']} (–Ω–∞—á–∞–ª–æ: {format_date(project['start_date'])})",
            callback_data=f"view_project_{project['id']}"
        )])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)


# -----------------------------------------------------------------------------
# –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
# -----------------------------------------------------------------------------

@router.callback_query(lambda c: c.data.startswith("calculate_"))
async def calculate_schedule(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –¥–∞—Ç –∑–∞–¥–∞—á, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç, –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    project_id = int(callback.data.split("_")[1])

    await callback.message.edit_text("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –∑–∞–¥–∞—á–∞—Ö
        project = project_manager.get_project_details(project_id)
        tasks = task_manager.get_tasks_by_project(project_id)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∏
        all_tasks = task_manager.get_all_tasks_by_project(project_id)
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tasks)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ {len(all_tasks)} –∑–∞–¥–∞—á –≤—Å–µ–≥–æ (–≤–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∏)")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
        result = schedule_project(project, tasks, task_manager, employee_manager)

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        task_map = {}
        for task in all_tasks:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –≤–∫–ª—é—á–∞—è –ø–æ–¥–∑–∞–¥–∞—á–∏
            task_id = task['id']
            task_map[task_id] = task
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ID
            task_map[str(task_id)] = task

        print(f"–°–æ–∑–¥–∞–Ω —Å–ª–æ–≤–∞—Ä—å task_map —Å {len(task_map)} –∑–∞–¥–∞—á–∞–º–∏")

        # –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        balanced_task_dates = balance_employee_workload(result['task_dates'], task_map, employee_manager)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏
        result['task_dates'] = balanced_task_dates

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        update_result = update_database_assignments(result['task_dates'], task_manager, employee_manager)
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {update_result} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        task_dates = result['task_dates']
        critical_path = result['critical_path']
        duration = result['duration']

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å: {critical_path}")
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {duration} –¥–Ω–µ–π")
        print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–∞—Ç—ã –¥–ª—è {len(task_dates)} –∑–∞–¥–∞—á")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        text = generate_planning_report(project, tasks, result, task_manager, employee_manager)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        safe_project_name = "".join(c if c.isalnum() or c in [' ', '.', '_', '-'] else '_' for c in project['name'])
        temp_dir = tempfile.mkdtemp()
        report_file_path = os.path.join(temp_dir, f"{safe_project_name}_report.txt")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        with open(report_file_path, 'w', encoding='utf-8') as file:
            file.write(text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞
        try:
            gantt_image = gantt_chart.generate(project, tasks, result['task_dates'], result['critical_path'])
            has_gantt = True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞: {str(e)}")
            import traceback
            print(traceback.format_exc())
            gantt_image = None
            has_gantt = False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"–†–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}' –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {result.get('duration', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')} –¥–Ω–µ–π.\n"
            f"–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ."
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
        report_file = FSInputFile(report_file_path)
        await bot.send_document(
            callback.from_user.id,
            report_file,
            caption=f"–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É '{project['name']}'"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
        if has_gantt and gantt_image:
            gantt_file = FSInputFile(gantt_image)
            await bot.send_photo(
                callback.from_user.id,
                gantt_file,
                caption=f"–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'",
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", callback_data=f"workload_{project_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.reply("–†–∞—Å—á–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω—ã", reply_markup=markup)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            if os.path.exists(report_file_path):
                os.remove(report_file_path)
            if gantt_image and os.path.exists(gantt_image):
                os.remove(gantt_image)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
    except Exception as e:
        import traceback
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {str(e)}\n{traceback.format_exc()}"
        print(error_msg)
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {str(e)}")
        return

def generate_planning_report(project, tasks, result, task_manager, employee_manager):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        project (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        tasks (list): –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        task_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
        employee_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    """
    import datetime

    task_dates = result['task_dates']
    critical_path = result['critical_path']
    duration = result['duration']

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
    text = f"üìä –û–¢–ß–ï–¢ –ü–û –ö–ê–õ–ï–ù–î–ê–†–ù–û–ú–£ –ü–õ–ê–ù–£\n"
    text += f"=============================================\n\n"
    text += f"üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ï–ö–¢–ï\n"
    text += f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: '{project['name']}'\n"

    # –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project['name']}")
    print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á: {len(tasks)} –∑–∞–¥–∞—á")
    print(f"–î–∞–Ω–Ω—ã–µ –¥–∞—Ç: {len(task_dates)} –∑–∞–ø–∏—Å–µ–π")

    # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    if task_dates:
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        start_dates = []
        end_dates = []

        for dates in task_dates.values():
            if 'start' in dates:
                start_dates.append(datetime.datetime.strptime(dates['start'], '%Y-%m-%d'))
            if 'end' in dates:
                end_dates.append(datetime.datetime.strptime(dates['end'], '%Y-%m-%d'))

        if start_dates and end_dates:
            project_start = min(start_dates)
            project_end = max(end_dates)
            project_duration = (project_end - project_start).days + 1

            text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {project_duration} –¥–Ω–µ–π\n"
            text += f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {project_start.strftime('%d.%m.%Y')}\n"
            text += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {project_end.strftime('%d.%m.%Y')}\n\n"
        else:
            text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {duration} –¥–Ω–µ–π\n\n"
    else:
        text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: {duration} –¥–Ω–µ–π\n\n"

    text += f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: {len(tasks)}\n\n"

    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
    text += f"üö© –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–£–¢–¨\n"
    text += f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å ‚Äî –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞.\n"
    text += f"–ó–∞–¥–µ—Ä–∂–∫–∞ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –∑–∞–¥–µ—Ä–∂–∫–µ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"

    text += f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—Å–µ –¥–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–¥–∞—á–∞ —Å –¥–∞—Ç–∞–º–∏ '19.05.2025 - 21.05.2025' "
    text += f"–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞ 19.05 –¥–æ –∫–æ–Ω—Ü–∞ 21.05.\n\n"

    if critical_path:
        critical_tasks = []
        total_critical_days = 0

        for task_id in critical_path:
            try:
                # –ü—Ä–æ–±—É–µ–º –∏ —Å —á–∏—Å–ª–æ–≤—ã–º, –∏ —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º ID
                task = None
                if isinstance(task_id, str) and task_id.isdigit():
                    task = task_manager.get_task(int(task_id))
                else:
                    task = task_manager.get_task(task_id)

                if task:
                    critical_tasks.append(task)
                    total_critical_days += task.get('duration', 0)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    start_date = "?"
                    end_date = "?"

                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è task_dates
                    if task_id in task_dates:
                        if 'start' in task_dates[task_id]:
                            start_date = format_date(task_dates[task_id]['start'])
                        if 'end' in task_dates[task_id]:
                            end_date = format_date(task_dates[task_id]['end'])
                    elif str(task_id) in task_dates:
                        if 'start' in task_dates[str(task_id)]:
                            start_date = format_date(task_dates[str(task_id)]['start'])
                        if 'end' in task_dates[str(task_id)]:
                            end_date = format_date(task_dates[str(task_id)]['end'])
                    elif task.get('start_date') and task.get('end_date'):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        start_date = format_date(task['start_date'])
                        end_date = format_date(task['end_date'])

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                    text += f"‚Ä¢ {task['name']} ({task.get('duration', 0)} –¥–Ω.)\n"
                    text += f"  –î–∞—Ç—ã: {start_date} - {end_date}\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
                    employee_id = task.get('employee_id')
                    if not employee_id and task_id in task_dates:
                        employee_id = task_dates[task_id].get('employee_id')
                    elif not employee_id and str(task_id) in task_dates:
                        employee_id = task_dates[str(task_id)].get('employee_id')

                    if employee_id:
                        try:
                            employee = employee_manager.get_employee(employee_id)
                            text += f"  –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {employee['name']} ({employee['position']})\n"
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}: {str(e)}")
                    text += "\n"
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task_id} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏: {str(e)}")

        text += f"–°—É–º–º–∞—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏: {total_critical_days} –¥–Ω–µ–π\n\n"
    else:
        text += "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        text += "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏\n"
        text += "‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ\n"
        text += "‚Ä¢ –ó–∞–¥–∞—á–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é: "

        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        sorted_tasks = sorted(tasks, key=lambda t: t.get('duration', 0), reverse=True)
        long_tasks = [t['name'] for t in sorted_tasks[:3] if t.get('duration', 0) > 0]

        if long_tasks:
            text += ", ".join(long_tasks) + "\n\n"
        else:
            text += "–Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    text += f"üë• –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß\n"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    employees_tasks = {}
    for task_id, dates in task_dates.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_id = None
        if 'employee_id' in dates:
            employee_id = dates['employee_id']

        # –ï—Å–ª–∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –≤ dates, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ task
        if not employee_id:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º task_id –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            try:
                numeric_task_id = int(task_id) if isinstance(task_id, str) else task_id
                task = task_manager.get_task(numeric_task_id)
                if task and 'employee_id' in task:
                    employee_id = task['employee_id']
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")

        if employee_id:
            if employee_id not in employees_tasks:
                employees_tasks[employee_id] = []

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ ID
                numeric_task_id = int(task_id) if isinstance(task_id, str) else task_id
                task = task_manager.get_task(numeric_task_id)
                if task:
                    employees_tasks[employee_id].append(task)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {str(e)}")

    if employees_tasks:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∑–∞–¥–∞—á–∏
        for employee_id, emp_tasks in employees_tasks.items():
            try:
                employee = employee_manager.get_employee(employee_id)
                text += f"{employee['name']} ({employee['position']}):\n"

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–∞–º
                sorted_tasks = sorted(
                    emp_tasks,
                    key=lambda t: task_dates.get(str(t['id']), {}).get('start', '9999-12-31') if str(
                        t['id']) in task_dates else
                    task_dates.get(t['id'], {}).get('start', '9999-12-31') if t['id'] in task_dates else
                    t.get('start_date', '9999-12-31')
                )

                total_load = 0
                for task in sorted_tasks:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏
                    start_date = "?"
                    end_date = "?"

                    # –ò—â–µ–º –¥–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
                    if task['id'] in task_dates:
                        if 'start' in task_dates[task['id']]:
                            start_date = format_date(task_dates[task['id']]['start'])
                        if 'end' in task_dates[task['id']]:
                            end_date = format_date(task_dates[task['id']]['end'])
                    elif str(task['id']) in task_dates:
                        if 'start' in task_dates[str(task['id'])]:
                            start_date = format_date(task_dates[str(task['id'])]['start'])
                        if 'end' in task_dates[str(task['id'])]:
                            end_date = format_date(task_dates[str(task['id'])]['end'])
                    elif task.get('start_date') and task.get('end_date'):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—ã –∏–∑ –∑–∞–¥–∞—á–∏
                        start_date = format_date(task['start_date'])
                        end_date = format_date(task['end_date'])

                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
                    task_duration = task.get('duration', 0)
                    total_load += task_duration

                    if task.get('parent_id'):
                        # –î–ª—è –ø–æ–¥–∑–∞–¥–∞—á –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É
                        try:
                            parent_task = task_manager.get_task(task['parent_id'])
                            parent_name = parent_task['name'] if parent_task else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞"
                            text += f"  ‚Ä¢ {parent_name} ‚Üí {task['name']} ({task_duration} –¥–Ω.)\n"
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∑–∞–¥–∞—á–∏ {task['parent_id']}: {str(e)}")
                            text += f"  ‚Ä¢ {task['name']} ({task_duration} –¥–Ω.)\n"
                    else:
                        text += f"  ‚Ä¢ {task['name']} ({task_duration} –¥–Ω.)\n"

                    text += f"    –î–∞—Ç—ã: {start_date} - {end_date}\n"

                # –°—É–º–º–∞—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                text += f"  –û–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {total_load} –¥–Ω–µ–π\n\n"

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}: {str(e)}")
    else:
        text += "\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏.\n"
        text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        text += "‚Ä¢ –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–¥–∞—á\n"
        text += "‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—è–º–∏\n"
        text += "‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text += f"üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n"
    text += f"1. –û–±—Ä–∞—Ç–∏—Ç–µ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏\n"
    text += f"2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –º–µ–∂–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏\n"
    text += f"3. –î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n\n"

    # –ü–æ–¥–ø–∏—Å—å
    text += f"=============================================\n"
    text += f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    text += f"–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"

    return text


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
def format_date(date_str):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    Args:
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ (DD.MM.YYYY)
    """
    if not date_str:
        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    try:
        import datetime
        date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
        return date.strftime('%d.%m.%Y')
    except ValueError:
        return date_str

def assign_task_with_days_off(task, project_start_date, employee_manager, suitable_employees, employee_workload):
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π

    Args:
        task (dict): –ó–∞–¥–∞—á–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        project_start_date (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '%Y-%m-%d'
        employee_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        suitable_employees (list): –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employee_workload (dict): –°–ª–æ–≤–∞—Ä—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        tuple: (employee_id, start_date, end_date, calendar_duration) - ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞,
              –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞, –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω—è—Ö
    """
    import datetime

    print(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É '{task['name']}' —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
    try:
        start_date = datetime.datetime.strptime(project_start_date, '%Y-%m-%d')
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
        start_date = datetime.datetime.now()

    duration = task.get('duration', 1)  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è—Ö

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
    best_employee = None
    best_start_date = start_date
    best_end_date = None
    best_calendar_duration = float('inf')

    for employee in suitable_employees:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö
        employee_id = employee['id']
        current_date = start_date
        working_days = 0
        calendar_days = 0

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞)
        max_days = duration * 3  # –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º

        while working_days < duration and calendar_days < max_days:
            date_str = current_date.strftime('%Y-%m-%d')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞–±–æ—á–∏–º –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            is_available = employee_manager.is_available(employee_id, date_str)

            if is_available:
                working_days += 1

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
            calendar_days += 1
            current_date = current_date + datetime.timedelta(days=1)

        # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
        if working_days == duration:
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
            end_date = current_date - datetime.timedelta(days=1)

            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            current_load = employee_workload.get(employee_id, 0)

            # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –º–µ–Ω—å—à–µ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            # –∏ —Å –º–µ–Ω—å—à–µ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –∑–∞–¥–∞—á–∏
            if (best_employee is None or
                    current_load < employee_workload.get(best_employee['id'], 0) or
                    (current_load == employee_workload.get(best_employee['id'], 0) and
                     calendar_days < best_calendar_duration)):
                best_employee = employee
                best_calendar_duration = calendar_days
                best_end_date = end_date
        else:
            print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee['name']} –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑-–∑–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π")

    if best_employee:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        employee_workload[best_employee['id']] = employee_workload.get(best_employee['id'], 0) + duration

        print(f"–ó–∞–¥–∞—á–∞ '{task['name']}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {best_employee['name']}")
        print(f"  –ù–∞—á–∞–ª–æ: {best_start_date.strftime('%Y-%m-%d')}")
        print(f"  –û–∫–æ–Ω—á–∞–Ω–∏–µ: {best_end_date.strftime('%Y-%m-%d')}")
        print(f"  –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {duration}")
        print(f"  –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π: {best_calendar_duration}")

        return (best_employee['id'],
                best_start_date.strftime('%Y-%m-%d'),
                best_end_date.strftime('%Y-%m-%d'),
                best_calendar_duration)
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É '{task['name']}' —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π")
        return None, None, None, None


def calculate_project_duration(start_date_str, task_dates):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–Ω—è—Ö"""
    import datetime

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if not task_dates:
        return 0

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—É—é –¥–∞—Ç—É –≤ –æ–±—ä–µ–∫—Ç datetime
    try:
        project_start = datetime.datetime.strptime(start_date_str, '%Y-%m-%d')
    except (ValueError, TypeError):
        return 0

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
    latest_end_date = None

    for task_id, dates in task_dates.items():
        if 'end' in dates:
            try:
                end_date = datetime.datetime.strptime(dates['end'], '%Y-%m-%d')
                if latest_end_date is None or end_date > latest_end_date:
                    latest_end_date = end_date
            except (ValueError, TypeError):
                continue

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if latest_end_date is None:
        return 0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
    duration = (latest_end_date - project_start).days + 1  # +1 —Ç–∞–∫ –∫–∞–∫ –≤–∫–ª—é—á–∞–µ–º –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è
    return duration


def calculate_critical_path(task_dates, tasks, task_manager):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞

    Args:
        task_dates (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞—Ç–∞–º–∏ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–¥–∞—á
        tasks (list): –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞
        task_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á

    Returns:
        list: –°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á, –æ–±—Ä–∞–∑—É—é—â–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
    """
    import datetime

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not task_dates:
        return []

    # –ò—â–µ–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    latest_end_date = None
    latest_task_id = None

    for task_id, dates in task_dates.items():
        if 'end' in dates:
            try:
                end_date = datetime.datetime.strptime(dates['end'], '%Y-%m-%d')
                if latest_end_date is None or end_date > latest_end_date:
                    latest_end_date = end_date
                    latest_task_id = task_id
            except (ValueError, TypeError):
                continue

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if latest_task_id is None:
        return []

    # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏ –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–∞–¥–∞—á–∞–º
    critical_path = []
    current_task_id = latest_task_id

    while current_task_id is not None:
        critical_path.append(current_task_id)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
        dependencies = task_manager.get_task_dependencies(current_task_id)

        if not dependencies:
            # –≠—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞, –ø—É—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω
            break

        # –ò—â–µ–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
        latest_predecessor_id = None
        latest_predecessor_end = None

        for dep in dependencies:
            predecessor_id = dep['predecessor_id']
            if predecessor_id in task_dates and 'end' in task_dates[predecessor_id]:
                try:
                    end_date = datetime.datetime.strptime(task_dates[predecessor_id]['end'], '%Y-%m-%d')
                    if latest_predecessor_end is None or end_date > latest_predecessor_end:
                        latest_predecessor_end = end_date
                        latest_predecessor_id = predecessor_id
                except (ValueError, TypeError):
                    continue

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –Ω–µ—Ç
        current_task_id = latest_predecessor_id

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–∞—á–∞–ª–∞ –∫ –∫–æ–Ω—Ü—É)
    return list(reversed(critical_path))

# -----------------------------------------------------------------------------
# –≠–∫—Å–ø–æ—Ä—Ç –≤ Jira
# -----------------------------------------------------------------------------

@router.callback_query(lambda c: c.data.startswith("export_jira_"))
async def export_to_jira(callback: CallbackQuery):
    project_id = int(callback.data.split("_")[2])

    await callback.message.edit_text("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç –≤ Jira...")

    try:
        project = project_manager.get_project_details(project_id)
        tasks = task_manager.get_all_tasks_by_project(project_id)

        # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Jira API
        result = jira_exporter.import_to_jira(project, tasks, employee_manager)

        if result['success']:
            # API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            message_text = (
                f"–ü—Ä–æ–µ–∫—Ç '{project['name']}' —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Jira!\n\n"
                f"–≠–ø–∏–∫: {result['epic_key']}\n"
                f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(result['created_issues'])}\n\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –≤ Jira: {result['jira_project_url']}"
            )
            await callback.message.edit_text(message_text)
        else:
            # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            file = FSInputFile(result['csv_export_file'])
            await bot.send_document(
                callback.from_user.id,
                file,
                caption=f"–§–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Jira (–ø—Ä–æ–µ–∫—Ç '{project['name']}')\n\n{result['message']}"
            )

            await callback.message.edit_text(
                "–≠–∫—Å–ø–æ—Ä—Ç –≤ Jira —á–µ—Ä–µ–∑ API –Ω–µ —É–¥–∞–ª—Å—è. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω CSV-—Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞."
            )

        buttons = [
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
        ]

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.reply("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=markup)

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Jira: {str(e)}")


# -----------------------------------------------------------------------------
# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
# -----------------------------------------------------------------------------

@router.message(Command("employee_workload"))
async def cmd_employee_workload(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    if not is_authorized(message.from_user.id):
        return

    projects = project_manager.get_all_projects()

    if not projects:
        await message.answer("–ü—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_project")
        return

    buttons = []
    for project in projects:
        buttons.append([InlineKeyboardButton(
            text=f"{project['name']} (–Ω–∞—á–∞–ª–æ: {format_date(project['start_date'])})",
            callback_data=f"workload_{project['id']}"
        )])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:", reply_markup=markup)


@router.callback_query(lambda c: c.data.startswith("workload_"))
async def show_employee_workload(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        project_id = int(callback.data.split("_")[1])
    except (ValueError, IndexError):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ
    project = project_manager.get_project_details(project_id)

    await show_workload_report(callback, project_id, employee_manager, project, task_manager)


async def show_workload_report(callback, project_id, employee_manager, project, task_manager):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram

    Args:
        callback: Callback –æ—Ç Telegram
        project_id: ID –ø—Ä–æ–µ–∫—Ç–∞
        employee_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        project: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        task_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    """
    try:
        # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ
        print(f"–ü–æ–∫–∞–∑ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project_id}: {project['name']}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        all_tasks = task_manager.get_all_tasks_by_project(project_id)
        print(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ: {len(all_tasks)}")

        # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö –∑–∞–¥–∞—á
        for task in all_tasks:
            print(
                f"–ó–∞–¥–∞—á–∞ {task['id']}: {task['name']} - –¥–∞—Ç—ã –∏–∑ –ë–î: {task.get('start_date', '–ù/–î')} - {task.get('end_date', '–ù/–î')}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á
        report = employee_manager.generate_workload_report(project_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç—á–µ—Ç–∞
        if len(report) <= 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞ –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
            ])
            await callback.message.edit_text(report, reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            temp_dir = tempfile.mkdtemp()

            # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            safe_project_name = "".join(
                c if c.isalnum() or c in [' ', '.', '_', '-'] else '_' for c in project['name']
            )
            file_path = os.path.join(temp_dir, f"{safe_project_name}_workload_report.txt")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(report)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"–û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}' –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ. "
                f"–í –ø—Ä–æ–µ–∫—Ç–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–æ {len(employee_manager.get_employee_workload(project_id))} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º
            file = FSInputFile(file_path)
            await callback.message.answer_document(
                file,
                caption=f"–û—Ç—á–µ—Ç –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                os.rmdir(temp_dir)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        workload_data = employee_manager.get_employee_workload(project_id)

        print(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è {len(workload_data)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        for emp_id, data in workload_data.items():
            print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {emp_id}: {data.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {len(data.get('tasks', []))} –∑–∞–¥–∞—á")
            for task in data.get('tasks', []):
                print(
                    f"  –ó–∞–¥–∞—á–∞: {task.get('id', 'ID?')}: {task.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {task.get('start_date', '–ù/–î')} - {task.get('end_date', '–ù/–î')}")

        if workload_chart and workload_data:
            try:
                workload_image = workload_chart.generate(project, workload_data)
                if os.path.exists(workload_image):
                    workload_file = FSInputFile(workload_image)
                    await callback.message.answer_photo(
                        workload_file,
                        caption=f"–î–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '{project['name']}'"
                    )
                    print(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                else:
                    print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {workload_image}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
                import traceback
                print(traceback.format_exc())

    except Exception as e:
        import traceback
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}\n{traceback.format_exc()}"
        print(error_msg)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–æ—Ä–æ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        short_error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞—á: {str(e)}"
        await callback.message.edit_text(
            short_error,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
            ])
        )

@router.callback_query(lambda c: c.data.startswith("assign_to_project_"))
async def assign_to_project(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
                ])
            )
            return

        project_id = int(parts[2])
    except ValueError:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
            ])
        )
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–µ–∫—Ç–µ
        project = project_manager.get_project_details(project_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        tasks = task_manager.get_tasks_by_project(project_id)
        assignable_tasks = [task for task in tasks if not task['is_group'] and not task.get('parent_id')]

        if not assignable_tasks:
            await callback.message.edit_text(
                f"–í –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}' –Ω–µ—Ç –∑–∞–¥–∞—á, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
                f"–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_task.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", callback_data=f"view_project_{project_id}")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
        buttons = []
        for task in assignable_tasks:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            status = ""
            if task.get('employee_id'):
                employee = employee_manager.get_employee(task['employee_id'])
                status = f" - {employee['name']}"

            buttons.append([InlineKeyboardButton(
                text=f"{task['name']}{status}",
                callback_data=f"assign_task_{task['id']}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é",
            callback_data=f"workload_{project_id}"
        )])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project['name']}':",
            reply_markup=markup
        )

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {str(e)}")


@router.callback_query(lambda c: c.data.startswith("assign_task_"))
async def assign_employee_to_task(task, start_date, end_date, suitable_employees, employee_daily_load, task_manager,
                                  employee_manager):
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π

    Args:
        task (dict): –ó–∞–¥–∞—á–∞
        start_date (str): –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        end_date (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        suitable_employees (list): –°–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        employee_daily_load (dict): –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–Ω—è–º
        task_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
        employee_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    Returns:
        int: ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å
    """
    try:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: {task['name']} (ID: {task['id']})")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        from datetime import datetime, timedelta
        if isinstance(start_date, datetime):
            original_start = start_date
        else:
            original_start = datetime.strptime(start_date, '%Y-%m-%d')

        if isinstance(end_date, datetime):
            original_end = end_date
        else:
            original_end = datetime.strptime(end_date, '%Y-%m-%d')

        # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –¥–Ω—è—Ö
        original_duration = (original_end - original_start).days + 1

        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        best_employee = None
        min_load = float('inf')
        best_start_date = None
        best_end_date = None

        for employee in suitable_employees:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä–æ–±—É–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
            start = original_start
            end = original_start
            working_days = 0
            current_date = start

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            max_end_date = original_end + timedelta(days=10)

            while working_days < original_duration and current_date <= max_end_date:
                date_str = current_date.strftime('%Y-%m-%d')

                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - —Ä–∞–±–æ—á–∏–π –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                if employee_manager.is_available(employee['id'], date_str):
                    working_days += 1
                    end = current_date

                current_date += timedelta(days=1)

            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            if working_days < original_duration:
                print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee['name']} –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å—Ä–æ–∫ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö")
                continue

            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            try:
                adjusted_start_str = start.strftime('%Y-%m-%d')
                adjusted_end_str = end.strftime('%Y-%m-%d')

                employee_tasks = employee_manager.check_employee_workload(employee['id'], adjusted_start_str,
                                                                          adjusted_end_str)
                existing_load = sum(t.get('duration', 0) for t in employee_tasks)

                # –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                daily_load = 0
                current = start
                while current <= end:
                    date_str = current.strftime('%Y-%m-%d')
                    daily_load += employee_daily_load.get(employee['id'], {}).get(date_str, 0)
                    current += timedelta(days=1)

                total_load = existing_load + daily_load

                # –ï—Å–ª–∏ —ç—Ç–æ –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
                if total_load < min_load:
                    min_load = total_load
                    best_employee = employee
                    best_start_date = start
                    best_end_date = end

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee['name']}: {str(e)}")
                continue

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ
        if best_employee:
            try:
                task_manager.assign_employee(task['id'], best_employee['id'])

                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                current = best_start_date
                while current <= best_end_date:
                    date_str = current.strftime('%Y-%m-%d')
                    if date_str not in employee_daily_load[best_employee['id']]:
                        employee_daily_load[best_employee['id']][date_str] = 0
                    employee_daily_load[best_employee['id']][date_str] += 1
                    current += timedelta(days=1)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö
                adjusted_start_str = best_start_date.strftime('%Y-%m-%d')
                adjusted_end_str = best_end_date.strftime('%Y-%m-%d')

                # –ï—Å–ª–∏ –¥–∞—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if adjusted_start_str != start_date or adjusted_end_str != end_date:
                    print(
                        f"–î–∞—Ç—ã –∑–∞–¥–∞—á–∏ '{task['name']}' —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {best_employee['name']}:")
                    print(f"  –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞—Ç—ã: {start_date} - {end_date}")
                    print(f"  –ù–æ–≤—ã–µ –¥–∞—Ç—ã: {adjusted_start_str} - {adjusted_end_str}")

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                task_manager.update_task_dates({
                    task['id']: {
                        'start': adjusted_start_str,
                        'end': adjusted_end_str
                    }
                })

                print(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {best_employee['name']} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É {task['name']}")
                return best_employee['id']
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {best_employee['name']} –Ω–∞ –∑–∞–¥–∞—á—É {task['name']}: {str(e)}")
                return None
        else:
            print(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task['name']}")
            return None

    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É {task['name']}: {str(e)}")
        return None

@router.callback_query(lambda c: c.data.startswith("set_employee_"))
async def set_employee(callback: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 4:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        task_id = int(parts[2])
        employee_id = int(parts[3])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task = task_manager.get_task(task_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        employee = employee_manager.get_employee(employee_id)

        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É
        task_manager.assign_employee(task_id, employee_id)

        await callback.message.edit_text(
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee['name']} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–¥–∞—á—É '{task['name']}'.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é",
                    callback_data=f"workload_{task['project_id']}"
                )]
            ])
        )

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {str(e)}")


@router.callback_query(lambda c: c.data.startswith("unassign_employee_"))
async def unassign_employee(callback: CallbackQuery):
    """–°–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —Å –∑–∞–¥–∞—á–∏"""
    try:
        parts = callback.data.split("_")
        if len(parts) < 3:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        task_id = int(parts[2])

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        task = task_manager.get_task(task_id)

        # –°–Ω–∏–º–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        task_manager.db.execute("UPDATE tasks SET employee_id = NULL WHERE id = ?", (task_id,))

        await callback.message.edit_text(
            f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á—É '{task['name']}' —Å–Ω—è—Ç–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é",
                    callback_data=f"workload_{task['project_id']}"
                )]
            ])
        )

    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {str(e)}")


# -----------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------------------------------------------------------

@router.message(Command("test_mode"))
async def cmd_test_mode(message: Message):
    """
    –í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —É—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.

    –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π —É –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    —Ä–∞—Å—á–µ—Ç–æ–≤ –±–æ—Ç–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –±–µ–∑ —É—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id, db_manager):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
        return

    from utils.test_helpers import disable_days_off_for_testing, update_employees_in_db

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        original_employees = disable_days_off_for_testing()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        global test_mode_active, original_employees_data
        test_mode_active = True
        original_employees_data = original_employees

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_employees_in_db(db_manager)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã.\n\n"
            "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –±–µ–∑ —É—á–µ—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö. "
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏.\n\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /normal_mode."
        )

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data="create_test_project")],
            [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")]
        ])

        await message.answer(
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ?",
            reply_markup=markup
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {str(e)}")


@router.message(Command("normal_mode"))
async def cmd_normal_mode(message: Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id, db_manager):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    global test_mode_active, original_employees_data
    if not test_mode_active:
        await message.answer("–ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.")
        return

    from utils.test_helpers import restore_days_off, update_employees_in_db

    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω—è—Ö
        restore_days_off(original_employees_data)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        test_mode_active = False
        original_employees_data = None

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        update_employees_in_db(db_manager)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è —Å —É—á–µ—Ç–æ–º –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {str(e)}")


@router.callback_query(F.data == "create_test_project")
async def create_test_project(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    """
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:")
    await state.set_state(ProjectState.waiting_for_name)


async def main():
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    db_manager.init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())